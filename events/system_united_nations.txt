namespace = united_nations

#THIS is UN recognized BUT has unrecognized country type
united_nations.1 = {
	type = country_event

	title = united_nations.1.t
	desc = united_nations.1.d
	
	#flavor = united_nations.1.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1

	trigger = {
		OR = { 
			has_modifier = unga_member
			has_modifier = unsc_permanent_member
			has_modifier = unsc_non_permanent_member
		}
		NOT = { is_country_type = recognized }
	}

	immediate = {
		
	}

	option = {
		name = united_nations.1.a #Unfortunate
		set_country_type = recognized
	}
	
}

#THIS is not UN recognized BUT has recognized country type
united_nations.2 = {
	type = country_event

	title = united_nations.2.t
	desc = united_nations.2.d
	
	#flavor = united_nations.1.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1

	trigger = {
		NOT = { has_modifier = unga_member }
		is_country_type = recognized
	}

	immediate = {
		
	}

	option = {
		name = united_nations.1.a #Unfortunate
		set_country_type = unrecognized
	}
	
}

united_nations.3 = {
	type = country_event

	title = united_nations.2.t
	desc = united_nations.2.d
	
	#flavor = united_nations.1.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1

	trigger = {
		OR = { 
			has_modifier = unga_member
			has_modifier = unsc_permanent_member
			has_modifier = unsc_non_permanent_member
			
			is_country_type = recognized
		}
		is_not_sufficiently_independent = yes
	}

	immediate = {
		
	}

	option = {
		name = united_nations.1.a #Unfortunate
		remove_modifier = unga_member
		remove_modifier = unsc_permanent_member
		remove_modifier = unsc_non_permanent_member
		
		set_country_type = unrecognized
	}
	
}

#Set Non Permanent Members of the UNSC - Check every month
united_nations.4 = {
	type = country_event
	hidden = yes

	trigger = {
		
		#Check if there are less than 15 UNSC members
		any_country = {
			exists = yes
			OR = { has_modifier = unsc_non_permanent_member has_modifier = unsc_permanent_member }
			count < 15
		}
		
		#There are more than 30 UNGA members
		any_country = {
			exists = yes
			has_modifier = unga_member
			
			count > 30
		}
		
		#There is someone to give the UNSC seat to
		any_country = {
			exists = yes
			
			has_modifier = unga_member
			NOR = { has_modifier = unsc_non_permanent_member has_modifier = unsc_permanent_member }
			
			infamy = infamy_threshold:reputable
			is_at_war = no
		}
		
	}

	immediate = {
		
		#Find countries to give non-perm UNSC seat to
		random_country = {
			limit = {
				exists = yes
				
				has_modifier = unga_member
				NOR = { has_modifier = unsc_non_permanent_member has_modifier = unsc_permanent_member }
				
				infamy = infamy_threshold:reputable
				is_at_war = no
			}
			trigger_event = { id = united_nations.5 }
			add_modifier = { 
				name = unsc_non_permanent_member
				months = 24 
			}
		}
		
	}
	
}

#Set Non Permanent Members of the UNSC - Give
united_nations.5 = {
	type = country_event

	title = UNSC_non_perm_membership.t
	desc = UNSC_non_perm_membership.d
	flavor = UNSC_non_perm_membership.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1

	immediate = {
	
		save_scope_as = new_non_perm_UNSC_member
		
	}

	option = {
		name = UNSC_non_perm_membership.option 		#Great
		
	}
	
}

#Vote on UN Peacekeeping - Round 1 in the UNSC
united_nations.6 = {
	type = country_event

	title = UNSC_peacekeeping_resolution.t
	desc = UNSC_peacekeeping_resolution.d
	flavor = UNSC_peacekeeping_resolution.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1

	immediate = {
	
		random_country = {
			limit = { 
				exists = yes
				has_variable = un_peacekeeping_applicant_var
			}
			save_scope_as = un_peacekeeping_applicant
		}
		
		random_country = {
			limit = { 
				exists = yes
				is_diplomatic_play_enemy_of = scope:un_peacekeeping_applicant
				is_diplomatic_play_initiator = yes
				has_war_with = scope:un_peacekeeping_applicant
			}
			save_scope_as = un_peacekeeping_aggressor
		}
		
		save_scope_as = un_peacekeeping_resolution_voter
		
	}

	option = {
		name = un_peacekeeping_vote.option.1 			#Support for FROM
		
		#Record vote FOR
		change_global_variable = {
			name = unsc_peackeeping_vote_count_var
			add = 1
		}
		
		#Mark as a UNSC supporter so that a containment war can be triggered later
		set_variable = un_peacekeeping_unsc_supporter_var
		
		set_variable = un_peacekeeping_voted_for_war
		
		#FROM is happy with THIS
		set_relations = {
			country = scope:un_peacekeeping_applicant
			value = 50
		}
		
		ai_chance = { 
			base = 0
			modifier = {
				trigger = {
					OR = { 
						has_attitude = {
							who = un_peacekeeping_applicant
							attitude >= cooperative
						}
						scope:un_peacekeeping_applicant = {
							OR = { 
								has_diplomatic_pact = { who = ROOT type = defensive_pact } 
								has_diplomatic_pact = { who = ROOT type = alliance } 
							}
						}
					}
				}
				add = 100
			}
		}
		
	}
	
	option = {
		name = un_peacekeeping_vote.option.2 			#Do not support for FROM/VETO
		
		#Record vote AGAINST
		change_global_variable = {
			name = unsc_peackeeping_vote_count_var
			add = -1
		}
		
		#Set VETO marker if Perm UNSC member voting against
		if = {
			limit = { has_modifier = unsc_permanent_member }
			set_variable = un_peacekeeping_VETO_var
		}
		
		#FROM is angry with THIS
		set_relations = {
			country = scope:un_peacekeeping_applicant
			value = -50
		}
		
		ai_chance = { 
			base = 0
			modifier = {
				trigger = {
					OR = { 
						has_attitude = {
							who = un_peacekeeping_applicant_var
							attitude <= wary
						}
						scope:un_peacekeeping_aggressor = {
							OR = { 
								has_diplomatic_pact = { who = ROOT type = defensive_pact } 
								has_diplomatic_pact = { who = ROOT type = alliance } 
							}
						}
						any_country = {
							exists = yes
							has_variable = un_peacekeeping_applicant_var
							OR = { 
								has_attitude = {
									who = ROOT
									attitude <= antagonistic
								}
								relations:root < relations_threshold:poor
							}
						}
					}
				}
				add = 100
			}
		}
		
	}
	
	option = {
		name = un_peacekeeping_vote.option.3 			#Abstain from voting
		default_option = yes
		
		#FROM is angry with THIS
		set_relations = {
			country = scope:un_peacekeeping_applicant
			value = -25
		}
		
		ai_chance = { 
			base = 1
		}
		
	}
	
}

#Vote on UN Peacekeeping - Round 2 in the UNGA
united_nations.7 = {
	type = country_event

	title = UNGA_peacekeeping_resolution_advance.t
	desc = UNGA_peacekeeping_resolution_advance.d
	flavor = UNGA_peacekeeping_resolution_advance.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1
	
	trigger = {
		
		#Resolution has not expired
		has_variable = un_peacekeeping_applicant_var
		
		#Round 1 has timed out
		NOT = { has_modifier = un_peacekeeping_unsc_stage_var }
		NOT = { has_modifier = un_peacekeeping_unga_stage_var }
		
		#Round 1 passed
		global_var:unsc_peackeeping_vote_count_var >= 1
		NOT = { 
			any_country = { 
				exists = yes
				has_modifier = unsc_permanent_member
				has_variable = un_peacekeeping_VETO_var 
			} 
		}
		NOT = { has_variable = un_peacekeeping_UNSC_voted }
		
		#Baseline requirements
		has_modifier = unga_member
		is_diplomatic_play_committed_participant = yes
		is_diplomatic_play_initiator = no
		is_at_war = yes
		
	}

	immediate = {
	
		save_scope_as = un_peacekeeping_applicant
		
		#Round 2 voting (1 month of voting time)
		add_modifier = { name = un_peacekeeping_unga_stage_var days = 30 }
		
		#Send out vote choice event to all UNGA members
		every_country = {
			limit = {
				exists = yes
				NOT = { THIS = ROOT }
				has_modifier = unga_member
			}
			trigger_event = { id = united_nations.8 }
		}
		
		#Mark as round 1 completed
		set_variable = un_peacekeeping_UNSC_voted
		
	}

	option = {
		name = un_peacekeeping_update			#Excellent
		
	}
	
}

#Vote on UN Peacekeeping - Round 2 in the UNGA
united_nations.8 = {
	type = country_event

	title = UNGA_peacekeeping_resolution.t
	desc = UNGA_peacekeeping_resolution.d
	flavor = UNGA_peacekeeping_resolution.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1

	immediate = {
	
		random_country = {
			limit = { 
				exists = yes
				has_variable = un_peacekeeping_applicant_var
			}
			save_scope_as = un_peacekeeping_applicant
		}
		
		random_country = {
			limit = { 
				exists = yes
				is_diplomatic_play_enemy_of = scope:un_peacekeeping_applicant
				is_diplomatic_play_initiator = yes
				has_war_with = scope:un_peacekeeping_applicant
			}
			save_scope_as = un_peacekeeping_aggressor
		}
		
		save_scope_as = un_peacekeeping_resolution_voter
		
	}

	option = {
		name = un_peacekeeping_vote.option.1 			#Support for FROM
		
		#Record vote FOR
		change_global_variable = {
			name = unga_peackeeping_vote_count_var
			add = 1
		}
		
		set_variable = un_peacekeeping_voted_for_war
		
		#FROM is happy with THIS
		set_relations = {
			country = scope:un_peacekeeping_applicant
			value = 50
		}
		
		ai_chance = { 
			base = 0
			modifier = {
				trigger = {
					OR = { 
						has_attitude = {
							who = un_peacekeeping_applicant
							attitude >= cooperative
						}
						scope:un_peacekeeping_applicant = {
							OR = { 
								has_diplomatic_pact = { who = ROOT type = defensive_pact } 
								has_diplomatic_pact = { who = ROOT type = alliance } 
							}
						}
					}
				}
				add = 100
			}
		}
		
	}
	
	option = {
		name = un_peacekeeping_vote.option.2 			#Do not support for FROM
		
		#Record vote AGAINST
		change_global_variable = {
			name = unga_peackeeping_vote_count_var
			add = -1
		}
		
		#FROM is angry with THIS
		set_relations = {
			country = scope:un_peacekeeping_applicant
			value = -50
		}
		
		ai_chance = { 
			base = 0
			modifier = {
				trigger = {
					OR = { 
						has_attitude = {
							who = un_peacekeeping_applicant_var
							attitude <= wary
						}
						scope:un_peacekeeping_aggressor = {
							OR = { 
								has_diplomatic_pact = { who = ROOT type = defensive_pact } 
								has_diplomatic_pact = { who = ROOT type = alliance } 
							}
						}
						any_country = {
							exists = yes
							has_variable = un_peacekeeping_applicant_var
							OR = { 
								has_attitude = {
									who = ROOT
									attitude <= antagonistic
								}
								relations:root < relations_threshold:poor
							}
						}
					}
				}
				add = 100
			}
		}
		
	}
	
	option = {
		name = un_peacekeeping_vote.option.3 			#Abstain from voting
		default_option = yes
		
		#FROM is angry with THIS
		set_relations = {
			country = scope:un_peacekeeping_applicant
			value = -25
		}
		
		ai_chance = { 
			base = 1
		}
		
	}
	
}

#Vote on UN Peacekeeping - Resolution is successful
united_nations.9 = {
	type = country_event

	title = UN_peacekeeping_resolution_YES.t
	desc = UN_peacekeeping_resolution_YES.d
	flavor = UN_peacekeeping_resolution_YES.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1
	
	trigger = {
		
		#Resolution has not expired
		has_variable = un_peacekeeping_applicant_var
		
		#Round 1 has timed out
		NOT = { has_modifier = un_peacekeeping_unga_stage_var }
		global_var:unsc_peackeeping_vote_count_var >= 1
		has_variable = un_peacekeeping_UNSC_voted
		
		#Round 2 passed
		global_var:unga_peackeeping_vote_count_var >= 1
		
		#Baseline requirements
		has_modifier = unga_member
		is_diplomatic_play_committed_participant = yes
		is_diplomatic_play_initiator = no
		is_at_war = yes
		
		#Has not been fired yet
		NOT = { has_variable = un_peacekeeping_resolution_passed }
	}

	immediate = {
	
		save_scope_as = un_peacekeeping_applicant
		
		#UN sends out ultimatum to aggressors to end diplo play or face a containment war
		random_country = {
			limit = {
				exists = yes
				is_diplomatic_play_enemy_of = ROOT
				is_diplomatic_play_initiator = yes
				is_at_war = yes
				any_scope_war = { is_warleader = root }
			}
			trigger_event = { id = united_nations.10 }
			
			#Mark country as having been targeted by UN
			set_variable = un_peacekeeping_resolution_passed
		}
		
		#Event fired
		set_variable = un_peacekeeping_resolution_passed
		
	}

	option = {
		name = un_peacekeeping_update				#Excellent
		
	}
	
}

#UN Peacekeeping ultimatum
united_nations.10 = {
	type = country_event

	title = UN_peacekeeping_ultimatum.t
	desc = UN_peacekeeping_ultimatum.d
	flavor = UN_peacekeeping_ultimatum.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1

	immediate = {
	
		random_country = {
			limit = { 
				exists = yes
				has_variable = un_peacekeeping_applicant_var
			}
			save_scope_as = un_peacekeeping_applicant
		}
		
		save_scope_as = un_peacekeeping_aggressor
		
		#Generate UNSC country to lead war of containment
		if = {
			limit = { 
				any_country = { 
					exists = yes
					has_modifier = unsc_permanent_member
					NOT = { is_in_war_together = scope:un_peacekeeping_aggressor }
					has_variable = un_peacekeeping_unsc_supporter_var
					can_go_to_war = yes
				} 
			}
			random_country = {
				limit = { 
					exists = yes
					has_modifier = unsc_permanent_member
					NOT = { is_in_war_together = scope:un_peacekeeping_aggressor }
					has_variable = un_peacekeeping_unsc_supporter_var
					can_go_to_war = yes
				}
				save_scope_as = un_peacekeeping_containment_war_leader
			}
		}
		else = {
			random_country = {
				limit = { 
					exists = yes
					NOT = { is_in_war_together = scope:un_peacekeeping_aggressor }
					has_variable = un_peacekeeping_unsc_supporter_var
					can_go_to_war = yes
				}
				save_scope_as = un_peacekeeping_containment_war_leader
			}
		}
		
		#Clean up
		trigger_event = { id = united_nations.12 }
		
	}

	option = {
		name = un_peacekeeping_ultimatum.option.1 			#Accept peace
		highlighted_option = yes
		
		#End diplomatic play
		every_diplomatic_play = {
			limit = {
				initiator_is = scope:un_peacekeeping_aggressor
				target_is = scope:un_peacekeeping_applicant
			}
			end_play = yes
		}
		create_truce = {
			country = scope:un_peacekeeping_applicant
			months = 24
		}
		
		#International community is very happy
		change_infamy = -50
		
		custom_tooltip = {
			text = everyone_is_angry_custom_tooltip
			every_scope_state = {
				add_radicals = {
					value = large_radicals
				}
			}
		}
		
		#National humiliation
		add_modifier = { 
			name = national_humiliation 
			months = 60 
			is_decaying = yes 
		} 
		
		#Clean up
		trigger_event = { id = united_nations.12 }
		
		ai_chance = { 
			base = 0
		}
		
	}
	
	option = {
		name = un_peacekeeping_ultimatum.option.2 			#Continue the war
		default_option = yes
		
		#International community is NOT happy
		change_infamy = 100
		
		custom_tooltip = {
			text = un_peacekeeping_coalition_custom_tooltip
			
			#Create an alliance with UNSC containment war leader
			every_country = {
				limit = { 
					NOT = { 
						has_diplomatic_pact = { who = ROOT type = alliance }
					} 
					has_modifier = unga_member
					
					has_variable = un_peacekeeping_voted_for_war
				}
				create_diplomatic_pact = {
					country = scope:un_peacekeeping_containment_war_leader
					type = alliance
				}
			}
			
			#War of containment begins!
			scope:un_peacekeeping_containment_war_leader = { 
				create_diplomatic_play = {
					name = containment_war
					type = dp_un_peacekeeping
					
					target_country = scope:un_peacekeeping_aggressor
			
					war = yes
				}
			}
			
		}
		
		#Clean up
		trigger_event = { id = united_nations.12 }
		
		ai_chance = { 
			base = 100
		}
		
	}
	
}

#UN Peacekeeping fails
united_nations.11 = {
	type = country_event

	title = UN_peacekeeping_resolution_NO.t
	desc = UN_peacekeeping_resolution_NO.d
	flavor = UN_peacekeeping_resolution_NO.f

	event_image = {
		video = "gfx/event_pictures/unspecific_ruler_speaking_to_people.bk2"
	}

	icon = "gfx/interface/icons/event_icons/event_portrait.dds"

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"
	on_opened_soundeffect = "event:/SFX/Events/unspecific/leader_speaking_to_a_group_of_people"

	duration = 1
	
	trigger = {
		
		#Resolution has not expired
		has_variable = un_peacekeeping_applicant_var
		
		#Round 1 & 2 have timed out
		NOT = { has_modifier = un_peacekeeping_unsc_stage_var }
		NOT = { has_modifier = un_peacekeeping_unga_stage_var }
		
		#Neither round passed
		OR = { 
			global_var:unsc_peackeeping_vote_count_var <= 0
			global_var:unga_peackeeping_vote_count_var <= 0
			
			any_country = { 
				exists = yes
				has_modifier = unsc_permanent_member
				has_variable = un_peacekeeping_VETO_var 
			}
		}
		
		#Baseline requirements
		has_modifier = unga_member
		is_diplomatic_play_committed_participant = yes
		is_diplomatic_play_initiator = no
		is_at_war = yes
		
	}

	immediate = {
	
		random_country = {
			limit = { 
				exists = yes
				has_variable = un_peacekeeping_VETO_var
			}
			save_scope_as = un_peacekeeping_vetoer
		}
	
		save_scope_as = un_peacekeeping_applicant
		
		#Trigger clean up event
		remove_variable = un_peacekeeping_applicant_var
		trigger_event = { id = united_nations.12 }
		
	}

	option = {
		name = un_peacekeeping_fails				#F
		
	}
	
}

#Clean Up UN Peacekeeping
united_nations.12 = {
	type = country_event
	hidden = yes
	
	trigger = {
	
		OR = { 
			has_variable = un_peacekeeping_applicant_var
			AND = { 
				has_variable = un_peacekeeping_resolution_passed 
				is_at_war = no
			}
		}
		
		OR = {
			NOT = { has_modifier = unga_member }
			is_diplomatic_play_committed_participant = no
		}
		
	}

	immediate = {
		
		#Remove all variables
		every_country = { remove_variable = un_peacekeeping_applicant_var }
		remove_global_variable = unsc_peackeeping_vote_count_var
		remove_global_variable = unga_peackeeping_vote_count_var
		every_country = { remove_modifier = un_peacekeeping_unsc_stage_var }
		every_country = { remove_modifier = un_peacekeeping_unga_stage_var }
		every_country = { remove_variable = un_peacekeeping_VETO_var }
		every_country = { limit = { is_at_war = no } remove_variable = un_peacekeeping_resolution_passed }
		every_country = { remove_variable = un_peacekeeping_unsc_supporter_var }
		every_country = { remove_variable = un_peacekeeping_UNSC_voted }
		every_country = { remove_variable = un_peacekeeping_voted_for_war }
		
	}
	
}